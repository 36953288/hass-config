
    ####################################################
    #                                                  #
    #                     SENSORS                      #
    #                                                  #
    ####################################################

  - platform: version
    name: hass_version_installed

  - platform: version
    name: hass_version_latest
    source: docker

  - platform: filesize
    file_paths:
      - /config/home-assistant_v2.db
      - /config/home-assistant.log

  - platform: file
    name: oresundskraft
    file_path: /config/python/data.kwh

  - platform: systemmonitor
    resources:
      - type: disk_use_percent
        arg: /
      - type: memory_use_percent
      - type: processor_use
      - type: last_boot

  - platform: time_date
    display_options:
      ['time', 'date']

  - platform: scrape
    resource: https://elen.nu/timpriser-pa-el-for-elomrade-se4-malmo
    name: Aktuellt spotpris
    select: ".elspot-area-price"
    value_template: '{{ ((value.split(" ")[0]) | replace (",", "."))}}'
    unit_of_measurement: "öre/kWh"

  - platform: dnsip

  - platform: darksky
    api_key: !secret darksky_api_key
    language: sv
    monitored_conditions:
      ['precip_probability', 'temperature', 'apparent_temperature', 'icon']

  - platform: rest
    name: fullykiosk
    json_attributes:
      ['batteryLevel', 'screenBrightness', 'plugged', 'motionDetectorState', 
      'lastAppStart', 'internalStorageFreeSpace', 'internalStorageTotalSpace', 
      'ramFreeMemory', 'ramTotalMemory', 'currentFragment']
    resource: !secret fullykiosk_rest_resource
    value_template: '{{ value_json.isScreenOn }}'
    scan_interval: 3

  - platform: rest
    name: docker_cpu
    resource: !secret ha_dockermon_cpu
    value_template: >
      {% set cpuDelta = value_json.cpu_stats.cpu_usage.total_usage - value_json.precpu_stats.cpu_usage.total_usage %}
      {% set systemDelta = value_json.cpu_stats.system_cpu_usage - value_json.precpu_stats.system_cpu_usage %}
      {{ (cpuDelta / systemDelta * value_json.cpu_stats.cpu_usage.percpu_usage | length * 100) | round(1) }}
    json_attributes:
      - cpu_stats
      - precpu_stats
      - memory_stats

  - platform: rest
    name: docker_uptime
    resource: !secret ha_dockermon_uptime
    value_template: >
      {{ value_json.status.split(' ')[1:] | join(' ') | replace ('About a minute', '1 minut') 
      | replace ('About an hour', '1 timme')  | replace ('seconds', 'sekunder') | replace ('minutes', 'minuter') 
      | replace ('hours', 'timmar') | replace ('days', 'dagar') + ' sedan' }}

  - platform: synologydsm_custom
    # changed timedelta, updates every 30 seconds instead of 15min
    host: !secret synologydsm_host
    port: !secret synologydsm_port
    ssl: false
    username: !secret synologydsm_username
    password: !secret synologydsm_password
    monitored_conditions:
      ['cpu_total_load', 'memory_real_usage', 'volume_status', 
      'volume_percentage_used', 'network_up', 'network_down', 'disk_temp']

  - platform: snmp
    host: !secret synologydsm_host
    community: public
    name: Drifttid
    baseoid: !secret synologydsm_baseoid
    value_template: >
      {% set uptime = value %}
      {% set days = ((uptime | int) / 8640000) | int %}
      {% set hours = ((uptime | int) / 360000) | int %}
      {% set minutes = ((uptime | int) / 6000) | int %}
      {% if days >= 2 %}{{ days }} dagar
      {% elif days >= 1 %}{{ days }} dag
      {% elif minutes < 1 %}Mindre än 1 minut
      {% elif minutes <= 1 %}{{ minutes }} minut
      {% elif minutes < 60 %}{{ minutes }} minuter
      {% elif hours <= 1 %}{{ hours }} timme
      {% elif hours < 24 %}{{ hours }} timmar
      {% endif %}

  - platform: plex_recently_added
    token: !secret plex_token
    host: !secret plex_host
    port: !secret plex_port
    max: 1
    img_dir: '/plex/'

  - platform: mqtt
    state_topic: "valetudo/rockrobo/state"
    json_attributes_topic: "valetudo/rockrobo/map_data"
    name: xiaomi_map
    value_template: 'OK'
    scan_interval: 5

  - platform: krisinformation
    county: !secret krisinformation_county
    latitude: !secret homeassistant_latitude
    longitude: !secret homeassistant_longitude
    radius: 50

  - platform: krisinformation
    country: 'Sverige'

    ####################################################
    #                                                  #
    #                   COMMAND LINE                   #
    #                                                  #
    ####################################################

  - platform: command_line
    name: imac_get_ip
    scan_interval: 300
    command: !secret imac_get_ip

  - platform: command_line
    name: imac_system_ssd
    scan_interval: 900
    unit_of_measurement: '%'
    command: !secret imac_system_ssd

  - platform: command_line
    name: imac_macintosh_hd
    scan_interval: 900
    unit_of_measurement: '%'
    command: !secret imac_macintosh_hd

  - platform: command_line
    name: imac_time_machine
    scan_interval: 900
    unit_of_measurement: '%'
    command: !secret imac_time_machine

  - platform: command_line
    name: imac_cpu_per
    scan_interval: 900
    unit_of_measurement: '%'
    command: !secret imac_cpu_per

  - platform: command_line
    name: imac_mem_per
    scan_interval: 900
    unit_of_measurement: '%'
    command: !secret imac_mem_per

  - platform: command_line
    name: getvolume
    scan_interval: 900
    command: !secret monitorer_update_volume

  - platform: command_line
    name: monitorer_mute_check
    scan_interval: 900
    command: !secret monitorer_mute_check

  - platform: command_line
    name: macos_uptime
    scan_interval: 120
    command: !secret macos_uptime

  - platform: command_line
    name: skanetrafiken
    scan_interval: 120
    command: !secret skanetrafiken

    ####################################################
    #                                                  #
    #                     TEMPLATE                     #
    #                                                  #
    ####################################################

  - platform: template
    sensors:
      flakt_timer_value:
        friendly_name: Stäng av fläkt efter timer
        icon_template: 'mdi:fan-off'
        unit_of_measurement: h
        value_template: "{{ states('input_number.fan_timer') | int }}"

      public_ip:
        value_template: !secret public_ip

      placeholder:
        value_template: " "

      docker_mem:
        value_template: >-
          {{ (state_attr('sensor.docker_cpu', 'memory_stats')['usage'] / 
          state_attr('sensor.docker_cpu', 'memory_stats')['limit'] * 100) | round(1) }}

      vpn_imac:
        friendly_name: VPN
        value_template: >-
          {% if states('sensor.imac_get_ip') == states('sensor.public_ip') %}
            Ej Ansluten
          {% else %}
            Ansluten
          {% endif %}
        icon_template: >-
          {% if states('sensor.imac_get_ip') == states('sensor.public_ip') %}
            mdi:shield-alert
          {% else %}
            mdi:shield-check
          {% endif %}

      macos_uptime_template:
        entity_id: sensor.time
        friendly_name: Drifttid
        icon_template: 'mdi:clock'
        value_template: >
          {% set uptime = 
          (as_timestamp(now()) - as_timestamp(states('sensor.macos_uptime') | int | timestamp_local | default(0))) %}
          {% if uptime | timestamp_custom("%d") | int-1 == 1 %}{{ uptime | timestamp_custom("%d") | int-1}} dag
          {% elif uptime | timestamp_custom("%d") | int-1 >= 2 %}{{ uptime | timestamp_custom("%d") | int-1}} dagar
          {% elif uptime | timestamp_custom("%H") | int-1 == 1 %}{{ uptime | timestamp_custom("%H") | int-1}} timme
          {% elif uptime | timestamp_custom("%H") | int-1 >= 2 %}{{ uptime | timestamp_custom("%H") | int-1}} timmar
          {% elif uptime | timestamp_custom("%M") | int == 1 %}{{ uptime | timestamp_custom("%M") | int}} minut
          {% elif uptime | timestamp_custom("%M") | int >= 2 %}{{ uptime | timestamp_custom("%M") | int}} minuter
          {% else %}Minde än 1 minut
          {% endif %}

      hass_version_template:
        icon_template: 'mdi:home-assistant'
        friendly_name_template: >-
          Installerad {{ states('sensor.hass_version_installed') }}
        value_template: >-
          {% if states('sensor.hass_version_installed') == states('sensor.hass_version_latest') %}
            Senaste
          {% else %}
            {{ states('sensor.hass_version_latest') }}
          {% endif %}

      hass_release_template:
        entity_id: sensor.time
        icon_template: 'mdi:update'
        friendly_name_template: >-
          {{ state_attr('calendar.home_assistant_devs','message') }}
        value_template: >-
          {% set dev = state_attr('calendar.home_assistant_devs', 'start_time') %}
          {% if ((as_timestamp(dev) - as_timestamp(now())) / 86400) < -1 %}
          Släppt {% elif ((as_timestamp(dev) - as_timestamp(now())) / 86400) < 0 %}
          Idag {% else %}
          {{ ((as_timestamp(dev) - as_timestamp(now())) / 86400) | int + 1 }} dagar
          {% endif %}

      printer_status_template:
        friendly_name: Skrivare
        icon_template: 'mdi:printer'
        value_template: >-
          {% if is_state('sensor.hp_printer_status', 'On') %}
            På
          {% elif is_state('sensor.hp_printer_status', 'Scanning') %}
            Skannar
          {% elif is_state('sensor.hp_printer_status', 'Copying') %}
            Kopierar
          {% elif is_state('sensor.hp_printer_status', 'Printing') %}
            Skriver ut
          {% elif is_state('sensor.hp_printer_status', 'Cancelling Job') %}
            Avbryter
          {% elif is_state('sensor.hp_printer_status', 'Idle') %}
            Viloläge
          {% elif is_state('sensor.hp_printer_status', 'Off') %}
            Av
          {% else %}
            {{ states('sensor.hp_printer_status') }}
          {% endif %}

      mattias_battery_level:
        friendly_name: Batteri
        unit_of_measurement: '%'
        value_template: "{{ states('sensor.battery_level') }}"
        icon_template: >-
          {% set battery_level = states('sensor.battery_level')|int('unknown') %}
          {% set battery_round = (battery_level|int / 10)|int * 10 %}
          {% if battery_level == 'unknown' %}
            mdi:battery-unknown
          {% else %}
            {% if battery_round >= 100 %}
              mdi:battery
            {% elif battery_round > 0 %}
              mdi:battery-{{ battery_round }}
            {% else %}
              mdi:battery-alert
            {% endif %}
          {% endif %}

      darksky_emoji:
        value_template: >-
          {% if is_state("sensor.dark_sky_icon","clear-day") %} {{ '\u2600\uFE0F' }}
          {% elif is_state("sensor.dark_sky_icon","clear-night") %} {{ '\U0001F319' }}
          {% elif is_state("sensor.dark_sky_icon","rain") %} {{ '\U0001F327' }}
          {% elif is_state("sensor.dark_sky_icon","snow") %} {{ '\U0001F328' }}
          {% elif is_state("sensor.dark_sky_icon","fog") %} {{ '\u2601\uFE0F' }}
          {% elif is_state("sensor.dark_sky_icon","sleet") %} {{ '\U0001F328' }}
          {% elif is_state("sensor.dark_sky_icon","wind") %} {{ '\U0001F32C' }}
          {% elif is_state("sensor.dark_sky_icon","cloudy") %} {{ '\u2601\uFE0F' }}
          {% elif is_state("sensor.dark_sky_icon","partly-cloudy-day") %} {{ '\u26C5\uFE0F' }}
          {% elif is_state("sensor.dark_sky_icon","partly-cloudy-night") %} {{ '\u2601\uFE0F' }}
          {% elif is_state("sensor.dark_sky_icon","hail") %} {{ '\U0001F328' }}
          {% elif is_state("sensor.dark_sky_icon","lightning") %} {{ '\U0001F329' }}
          {% elif is_state("sensor.dark_sky_icon","thunderstorm") %} {{ '\u26C8' }}
          {% elif is_state("sensor.dark_sky_icon","tornado") %} {{ '\U0001F32A' }}
          {% endif %}

      last_motion_sensor_triggered:
        value_template: >-
          {% set sensors = [states.input_boolean.motion_hall, states.input_boolean.motion_badrum, 
          states.input_boolean.motion_garderob, states.binary_sensor.wemo_motion] %}
          {% for sensor in sensors %}
            {% if as_timestamp(sensor.last_changed) == 
            as_timestamp(sensors | map(attribute='last_changed') | max) %}
              {{ sensor.entity_id }}
            {% endif %}
          {% endfor %}

      ps4_state:
        value_template: >-
          {% if is_state('media_player.playstation_4', 'off') or 
          is_state('media_player.playstation_4', 'standby') or 
          is_state('media_player.playstation_4', 'unknown') %}
            off
          {% else %}
            on
          {% endif %}

    ####################################################
    #                                                  #
    #                  LIGHT PERCENT                   #
    #                                                  #
    ####################################################

      belysning_percent:
        value_template: >-
          {% if is_state('light.belysning', 'on') %} 
          {{ (state_attr('light.belysning', 'brightness') / 2.54) | round }}{% endif %}

      taklampor_percent:
        value_template: >-
          {% if is_state('light.taklampor', 'on') %} 
          {{ (state_attr('light.taklampor', 'brightness') / 2.54) | round }}{% endif %}

      fonsterlampa_percent:
        value_template: >-
          {% if is_state('light.fonsterlampa', 'on') %} 
          {{ (state_attr('light.fonsterlampa', 'brightness') / 2.54) | round }}{% endif %}

      datorlampa_percent:
        value_template: >-
          {% if is_state('light.datorlampa', 'on') %} 
          {{ (state_attr('light.datorlampa', 'brightness') / 2.54) | round }}{% endif %}

      mattias_percent:
        value_template: >-
          {% if is_state('light.mattias', 'on') %} 
          {{ (state_attr('light.mattias', 'brightness') / 2.54) | round }}{% endif %}

      sanja_percent:
        value_template: >-
          {% if is_state('light.sanja', 'on') %} 
          {{ (state_attr('light.sanja', 'brightness') / 2.54) | round }}{% endif %}

      badrum_percent:
        value_template: >-
          {% if is_state('light.badrum', 'on') %} 
          {{ (state_attr('light.badrum', 'brightness') / 2.54) | round }}{% endif %}

      kok_percent:
        value_template: >-
          {% if is_state('light.kok', 'on') %} 
          {{ (state_attr('light.kok', 'brightness') / 2.54) | round }}{% endif %}
          
      garderob_percent:
        value_template: >-
          {% if is_state('light.kladkammare_2', 'on') %} 
          {{ (state_attr('light.kladkammare_2', 'brightness') / 2.54) | round }}{% endif %}

      hall_percent:
        value_template: >-
          {% if is_state('light.hall', 'on') %} 
          {{ (state_attr('light.hall', 'brightness') / 2.54) | round }}{% endif %}

    ####################################################
    #                                                  #
    #                      VACUUM                      #
    #                                                  #
    ####################################################

      roborock_battery_level:
        friendly_name: Batteri
        unit_of_measurement: '%'
        value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'battery_level') }}"
        icon_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'battery_icon') }}"

      roborock_state:
        friendly_name: Roborock S5
        value_template: >-
          {% if is_state('vacuum.xiaomi_vacuum_cleaner', 'docked') %}
          Dockad
          {% elif is_state('vacuum.xiaomi_vacuum_cleaner', 'cleaning') %}
          Städar
          {% elif is_state('vacuum.xiaomi_vacuum_cleaner', 'returning') %}
          Återvänder
          {% else %}
          {{ states('vacuum.xiaomi_vacuum_cleaner') }}
          {% endif %}
        icon_template: 'bha:roborock'

      roborock_fan_speed:
        value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'fan_speed') }}"

      roborock_filter:
        friendly_name: Filter
        unit_of_measurement: '%'
        value_template: "{{ (state_attr('vacuum.xiaomi_vacuum_cleaner', 'filter_left') / 1.5) | round }}"
        icon_template: 'mdi:air-filter'

      roborock_huvudborste:
        friendly_name: Huvudborste
        unit_of_measurement: '%'
        value_template: "{{ (state_attr('vacuum.xiaomi_vacuum_cleaner', 'main_brush_left') / 3) | round }}"
        icon_template: 'mdi:broom'

      roborock_sensorer:
        friendly_name: Sensorer
        unit_of_measurement: '%'
        value_template: "{{ (state_attr('vacuum.xiaomi_vacuum_cleaner', 'sensor_dirty_left') / 0.3) | round }}"
        icon_template: 'mdi:leak'

      roborock_sidoborste:
        friendly_name: Sidoborste
        unit_of_measurement: '%'
        value_template: "{{ (state_attr('vacuum.xiaomi_vacuum_cleaner', 'side_brush_left') / 2) | round }}"
        icon_template: 'mdi:brush'

      roborock_last_clean:
        entity_id: sensor.time
        friendly_name: Senast städat
        icon_template: 'mdi:clock'
        value_template: >
          {% set clean_stop = 
          (as_timestamp(now()) - as_timestamp(state_attr('vacuum.xiaomi_vacuum_cleaner', 'clean_stop') | default(0))) %}
          {% if clean_stop | timestamp_custom("%d") | int-1 == 1 %}{{ clean_stop | timestamp_custom("%d") | int-1}} dag sedan
          {% elif clean_stop | timestamp_custom("%d") | int-1 >= 2 %}{{ clean_stop | timestamp_custom("%d") | int-1}} dagar sedan
          {% elif clean_stop | timestamp_custom("%H") | int-1 == 1 %}{{ clean_stop | timestamp_custom("%H") | int-1}} timme sedan
          {% elif clean_stop | timestamp_custom("%H") | int-1 >= 2 %}{{ clean_stop | timestamp_custom("%H") | int-1}} timmar sedan
          {% elif clean_stop | timestamp_custom("%M")|int == 1 %}{{ clean_stop | timestamp_custom("%M") | int}} minut sedan
          {% elif clean_stop | timestamp_custom("%M")|int >= 2 %}{{ clean_stop | timestamp_custom("%M") | int}} minuter sedan
          {% else %}Minde än 1 minut sedan
          {% endif %}

    ####################################################
    #                                                  #
    #                      TABLET                      #
    #                                                  #
    ####################################################

      fullykiosk_plugged:
        friendly_name: Strömsladd ansluten
        value_template: >-
          {% if is_state_attr('sensor.fullykiosk', 'plugged', true) %} Ja {% else %} Nej {% endif %}
        icon_template: >-
          {% if is_state_attr('sensor.fullykiosk', 'plugged', true) %} mdi:power-plug {% else %} mdi:power-plug-off {% endif %}

      fullykiosk_storage_percentage:
        friendly_name: Lagring
        icon_template: 'mdi:sd'
        unit_of_measurement: '%'
        value_template: >
          {{ 100 - ( state_attr('sensor.fullykiosk', 'internalStorageFreeSpace') / 
          state_attr('sensor.fullykiosk', 'internalStorageTotalSpace') * 100 ) | int }}

      fullykiosk_memory_percentage:
        friendly_name: Minne
        icon_template: 'mdi:memory'
        unit_of_measurement: '%'
        value_template: >
          {{ 100 - ( state_attr('sensor.fullykiosk', 'ramFreeMemory') / 
          state_attr('sensor.fullykiosk', 'ramTotalMemory') * 100 ) | int }}

      fullykiosk_motion_detector_state:
        friendly_name: Kamera
        icon_template: 'mdi:camera'
        value_template: >-
          {% if is_state_attr('sensor.fullykiosk', 'motionDetectorState', 0) %}
          Av
          {% else %}
          På
          {% endif %}

      fullykiosk_battery_level:
        friendly_name: Batteri
        unit_of_measurement: '%'
        value_template: "{{ state_attr('sensor.fullykiosk', 'batteryLevel') }}"
        icon_template: >-
          {% set battery_level = state_attr('sensor.fullykiosk', 'batteryLevel')|int('unknown') %}
          {% set battery_round = (battery_level|int / 10)|int * 10 %}
          {% if battery_level == 'unknown' %}
            mdi:battery-unknown
          {% else %}
            {% if battery_round >= 100 %}
              mdi:battery
            {% elif battery_round > 0 %}
              mdi:battery-{{ battery_round }}
            {% else %}
              mdi:battery-alert
            {% endif %}
          {% endif %}

    ####################################################
    #                                                  #
    #                      DATE                        #
    #                                                  #
    ####################################################

      dag:
        entity_id: sensor.date
        value_template: >
          {% set days = ["Måndag", "Tisdag", "Onsdag", "Torsdag", "Fredag", "Lördag", "Söndag"] %}
          {{ days[now().weekday()] }}

      datum:
        value_template: >
          {% set months = ["Januari", "Februari", "Mars", "April", "Maj", "Juni", 
          "Juli", "Augusti", "September", "Oktober", "November", "December"] %}
          {{ strptime(states('sensor.date'), '%Y-%m-%d').day }}
          {{ months[now().month-1] }}

      tvatta_countdown:
        entity_id: sensor.time
        friendly_name: Tvätta
        value_template: >-
          {% if state_attr('calendar.tvatta', 'start_time') ==  null or 
          state_attr('calendar.tvatta', 'start_time') == None %}
          {% else %} 
            {% set calendar_tvattid = state_attr('calendar.tvatta', 'start_time') %}
            {% set nu_tid = now() %}

            {% set dag = strptime(calendar_tvattid, "%Y-%m-%d %H:%M:%S").strftime("%A") 
            | replace('Monday', 'Måndag') | replace('Tuesday', 'Tisdag') 
            | replace('Wednesday', 'Onsdag') | replace('Thursday', 'Torsdag') 
            | replace('Friday', 'Fredag') | replace('Saturday', 'Lördag') | replace('Sunday', 'Söndag') %}
            {% set tid = as_timestamp(calendar_tvattid) | timestamp_custom('%H:%M') %}

            {% set sub_timmar = as_timestamp(calendar_tvattid) | timestamp_custom('%H') | int / 24 %}
            {% set count = (as_timestamp(calendar_tvattid) - as_timestamp(nu_tid)) / 86400 - sub_timmar %}

            {% if count <= 0.0 %}
              {{'\U0001F4A6'}} Tvätt idag {{ tid }}
            {% elif count <= 1.0 %}
              Tvätt imorgon klockan {{ tid }}
            {% elif count <= 2.0 %}
              Tvätt i övermorgon klockan {{ tid }}
            {% else %}
              Tvätt om {{ (count + sub_timmar) | round }} dagar på {{ dag }} kl {{ tid }}
            {% endif %}
          {% endif %}

      tvatta_countdown_timer_trigger:
        entity_id: sensor.time
        value_template: >-
          {% if state_attr('calendar.tvatta', 'start_time') ==  null or 
          state_attr('calendar.tvatta', 'start_time') == None %}
            false
          {% else %} 
            {% set calendar_tvattid = state_attr('calendar.tvatta', 'start_time') %}
            {% if ((as_timestamp(calendar_tvattid) - as_timestamp(now())) / 86400) <= 0.004 %}
            true {% else %} false {% endif %}
          {% endif %}

      krisinformation_time_trigger:
        entity_id: sensor.time
        value_template: >-
          {% set date = state_attr('sensor.krisinformation_sverige', 'messages')[0]["Published"] %}
          {% if ((as_timestamp(date) - as_timestamp(now())) / 86400) <= -0.5 %}
          false {% else %} true
          {% endif %}

      mattias_last_changed:
        entity_id: sensor.time
        value_template: >-
          {%- set time = (as_timestamp(now()) - 
          as_timestamp(states.person.mattias.last_changed)) | int %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set days = (time // 86400) %}
          {% if time <= 60 %} 0m
          {% elif time <= 3600 %} {{ minutes }}m
          {% elif time <= 86400 %} {{ hours }}h
          {% elif time > 86400 %} {{ days }}d 
          {% endif %}

      sanja_last_changed:
        entity_id: sensor.time
        value_template: >-
          {%- set time = (as_timestamp(now()) - 
          as_timestamp(states.person.sanja.last_changed)) | int %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set days = (time // 86400) %}
          {% if time <= 60 %} 0m
          {% elif time <= 3600 %} {{ minutes }}m
          {% elif time <= 86400 %} {{ hours }}h
          {% elif time > 86400 %} {{ days }}d 
          {% endif %}

      mattias_last_changed_h:
        entity_id: sensor.time
        value_template: >-
          {%- set time = (as_timestamp(now()) - 
          as_timestamp(states.person.mattias.last_changed)) | int %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set days = (time // 86400) %}
          {% if time <= 60 %} mindre än 1m
          {% elif time <= 3600 %} {{ minutes }}m
          {% elif time <= 86400 and minutes == 0 %} {{ hours }}h
          {% elif time <= 86400 %} {{ hours }}h och {{ minutes }}m
          {% elif time > 86400 %} {{ days }}d 
          {% endif %}

      sanja_last_changed_h:
        entity_id: sensor.time
        value_template: >-
          {%- set time = (as_timestamp(now()) - 
          as_timestamp(states.person.sanja.last_changed)) | int %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set days = (time // 86400) %}
          {% if time <= 60 %} mindre än 1m
          {% elif time <= 3600 %} {{ minutes }}m
          {% elif time <= 86400 and minutes == 0 %} {{ hours }}h
          {% elif time <= 86400 %} {{ hours }}h och {{ minutes }}m
          {% elif time > 86400 %} {{ days }}d 
          {% endif %}

    ####################################################
    #                                                  #
    #                       NAS                        #
    #                                                  #
    ####################################################

      nas_disk_temp:
        friendly_name: Disktemperatur
        unit_of_measurement: '°C'
        icon_template: 'mdi:thermometer'
        value_template: >
          {{ (states('sensor.synology_dsm_temperature_sda'), states('sensor.synology_dsm_temperature_sdb'), 
          states('sensor.synology_dsm_temperature_sdc'), states('sensor.synology_dsm_temperature_sdd')) | max }}

      nas_net_down:
        value_template: ' '
        icon_template: 'mdi:arrow-down-bold'
        friendly_name_template: >
          {% set down = states('sensor.synology_dsm_network_down') | float %}
          {% if down < 1000 %}
          {{ down | round(0) }} kb/s
          {% elif down >= 1000 %}
          {{ ((down / 1000) | round(2)|string).rstrip('.0') }} Mb/s
          {% endif %}

      nas_net_up:
        value_template: ' '
        icon_template: 'mdi:arrow-up-bold'
        friendly_name_template: >
          {% set up = states('sensor.synology_dsm_network_up') | float %}
          {% if up < 1000 %}
          {{ up | round(0) }} kb/s
          {% elif up >= 1000 %}
          {{ ((up / 1000) | round(2)|string).rstrip('.0') }} Mb/s
          {% endif %}

      synology_dsm_status:
        friendly_name: Systemhälsa
        icon_template: 'mdi:nas'
        value_template: >-
          {% if is_state("sensor.synology_dsm_status_volume_1", "normal") %}
            Bra
          {% else %}
            {{ states('sensor.synology_dsm_status_volume_1') }}
          {% endif %}

      vpn_nas:
        friendly_name: VPN
        value_template: >-
          {% if states('sensor.myip') == states('sensor.public_ip') %}
            Ej Ansluten
          {% else %}
            Ansluten
          {% endif %}
        icon_template: >-
          {% if states('sensor.myip') == states('sensor.public_ip') %}
            mdi:shield-alert
          {% else %}
            mdi:shield-check
          {% endif %}

    ####################################################
    #                                                  #
    #                      MEDIA                       #
    #                                                  #
    ####################################################

      plex_title:
        value_template: >
          {% set data = state_attr('sensor.plex_recently_added', 'data') | from_json %} 
          {{ data[1].title }}
          {% if data[1].number is none %} ({{ data[1].aired.split('-')[0] }})
          {% else %} {{ data[1].number }} {% endif %}

      plex_title_truncate:
        value_template: >
          {{ states('sensor.plex_title') | truncate(30, True, '...', 0) }}

      apple_tv_vardagsrum_status:
        value_template: >
          {% if is_state('media_player.vardagsrum','playing') %} Spelar
          {% elif is_state_attr('media_player.vardagsrum','media_title', 'No title') %} Av
          {% elif is_state('media_player.vardagsrum','paused') %} Pausad
          {% else %} Av {% endif %}

      apple_tv_sovrum_status:
        value_template: >
          {% if is_state('media_player.sovrum','playing') %} Spelar
          {% elif is_state_attr('media_player.sovrum','media_title', 'No title') %} Av
          {% elif is_state('media_player.sovrum','paused') %} Pausad
          {% else %} Av {% endif %}

      playstation_status:
        value_template: >
          {% if is_state('media_player.playstation_4','playing') %} Spelar
          {% elif is_state('media_player.playstation_4','paused') %} Pausad
          {% else %} Av {% endif %}

      google_nest_mini_status:
        value_template: >
          {% if is_state('media_player.google_nest_mini','playing') %} Spelar
          {% elif is_state('media_player.google_nest_mini','paused') %} Pausad
          {% else %} Av {% endif %}

      apple_tv_vardagsrum_title_truncate:
        value_template: >
          {% if states('media_player.vardagsrum') == null %} {% else %}
            {% if is_state_attr('media_player.vardagsrum', 'media_title', 'Nothing playing') %} Inget spelas
            {% elif is_state_attr('media_player.vardagsrum', 'media_title', 'No title') %} Ingen titel
            {% elif is_state('media_player.vardagsrum', 'idle') %} Viloläge
            {% else %} {{ state_attr('media_player.vardagsrum', 'media_title') 
            | truncate(30, True, '...', 0) }} {% endif %}
          {% endif %}

      apple_tv_sovrum_title_truncate:
        value_template: >
          {% if states('media_player.sovrum') == null %} {% else %}
            {% if is_state_attr('media_player.sovrum', 'media_title', 'Nothing playing') %} Inget spelas
            {% elif is_state('media_player.sovrum', 'idle') %} Viloläge
            {% else %} {{ state_attr('media_player.sovrum', 'media_title') 
            | truncate(30, True, '...', 0) }} {% endif %}
          {% endif %}

      playstation_title_truncate:
        value_template: >
          {% if is_state('media_player.playstation_4', 'standby') %} Viloläge
          {% elif state_attr('media_player.playstation_4', 'media_title') == None %} Inget spelas
          {% else %} {{ state_attr('media_player.playstation_4', 'media_title') 
          | truncate(30, True, '...', 0) }} {% endif %} 

      google_nest_mini_title_truncate:
        value_template: >
          {% if is_state('media_player.google_nest_mini', 'off') or 
          is_state('media_player.google_nest_mini', 'idle') %} Viloläge
          {% elif state_attr('media_player.google_nest_mini', 'media_artist') == None or 
          state_attr('media_player.google_nest_mini', 'media_title') == None %} Ingen titel
          {% else %} {% set artist_title = state_attr('media_player.google_nest_mini', 'media_artist') 
          + ' - ' + state_attr('media_player.google_nest_mini', 'media_title') %}
          {{ artist_title | truncate(30, True, '...', 0) }} {% endif %}

    ####################################################
    #                                                  #
    #                    Monthly kWh                   #
    #                                                  #
    ####################################################

      oresundskraft_1:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[0].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[0].split(' ')[2] | int }}"

      oresundskraft_2:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[1].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[1].split(' ')[2] | int }}"

      oresundskraft_3:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[2].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[2].split(' ')[2] | int }}"

      oresundskraft_4:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[3].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[3].split(' ')[2] | int }}"

      oresundskraft_5:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[4].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') | replace('y','j') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[4].split(' ')[2] | int }}"

      oresundskraft_6:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[5].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[5].split(' ')[2] | int }}"

      oresundskraft_7:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[6].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[6].split(' ')[2] | int }}"

      oresundskraft_8:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[7].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[7].split(' ')[2] | int }}"

      oresundskraft_9:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[8].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[8].split(' ')[2] | int }}"

      oresundskraft_10:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[9].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') | replace('c','k') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[9].split(' ')[2] | int }}"

      oresundskraft_11:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[10].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[10].split(' ')[2] | int }}"

      oresundskraft_12:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[11].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[11].split(' ')[2] | int }}"

      last_month_kwh:
        unit_of_measurement: 'kWh'
        value_template: >
          {% for month in range(12) %}
            {% if now().month-1 == (states('sensor.oresundskraft').split(',')
            [month].split(' ')[0]|join|string).lstrip('0')|int %}
              {{ states('sensor.oresundskraft').split(',')[month].split(' ')[2] }}
            {% endif %}
          {% endfor %}

      last_month_price:
        entity_id: sensor.oresundskraft
        friendly_name_template: >
          {% if now().month-1 == 0 %}
            Beräknad {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[11].split(' ')[1], '%Y-%m-%d')) | 
            timestamp_custom('%B') | replace('ay', 'aj') | replace('y', 'i') | replace('ch', 's') 
            | replace('ne', 'ni') | replace('ust', 'usti') | replace('ct', 'kt')  }}
          {% else %}
            {% for month in range(12) %}
              {% if now().month-1 == (states('sensor.oresundskraft').split(',')[month].split(' ')[0]|join|string).lstrip('0')|int %}
                Beräknad {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[month].split(' ')[1], '%Y-%m-%d')) | 
                timestamp_custom('%B') | replace('ay', 'aj') | replace('y', 'i') | replace('ch', 's') 
                | replace('ne', 'ni') | replace('ust', 'usti') | replace('ct', 'kt')  }}
              {% endif %}
            {% endfor %}
          {% endif %}
        value_template: >
          {% set dagar %}
            {% if now().month-1 == 0 %}
              {{ states('sensor.oresundskraft').split(',')[11].split(' ')[1].split('-')[2] | int }}
            {% else %}
              {% for month in range(12) %}
                {% if now().month-1 == (states('sensor.oresundskraft').split(',')[month].split(' ')[0]|join|string).lstrip('0')|int %}
                  {{ states('sensor.oresundskraft').split(',')[month].split(' ')[1].split('-')[2] | int }}
                {% endif %}
              {% endfor %}
            {% endif %}
          {% endset %}
          {% set kwh = states('sensor.last_month_kwh') | float %}
            {% set eon_solkraft = states('sensor.last_month_kwh') | float * 0.05 %}
            {% set eon_arsavgift = 480 / 366 * dagar | float %}
              {% set spotpris = states('sensor.aktuellt_spotpris') | float / 100 %}
            {% set ore_abonnemang = 1020 / 366 * dagar | float %}
            {% set ore_elöverföring = kwh * 0.1400 %}
            {% set ore_energiskatt = kwh * 0.3530 %}
              {% set eon = (eon_solkraft + eon_arsavgift + (0.2373 * kwh * 1.25)) | round(2) %}
              {% set ore = ((ore_abonnemang + ore_elöverföring + ore_energiskatt) * 1.25) | round(2) %}
          {{ eon + ore }}
        unit_of_measurement: 'kr'

      total_year_kwh:
        entity_id: sensor.oresundskraft
        friendly_name_template: > 
          Totalt för {{ now().year }}
        value_template: "{{ states('sensor.oresundskraft').split('total=')[1]}}"
        unit_of_measurement: 'kWh'

      year:
        entity_id: sensor.time
        friendly_name_template: > 
          {{ now().year }}
        value_template: ' '

      last_year:
        entity_id: sensor.time
        friendly_name_template: > 
          {{ now().year-1 }}
        value_template: ' '
