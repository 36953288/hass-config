
binary_sensor:

    ####################################################
    #                                                  #
    #                      BINARY                      #
    #                                                  #
    ####################################################

  - platform: command_line
    name: plex_availability
    command: !secret plex_availability
    scan_interval: 300
    payload_on: 'on'
    payload_off: 'off'

  - platform: ping
    host: 8.8.8.8
    name: nas_internet_access

sensor:

    ####################################################
    #                                                  #
    #                     SENSORS                      #
    #                                                  #
    ####################################################

  - platform: version
    name: hass_version_installed

  - platform: version
    name: hass_version_latest
    source: docker

  - platform: version
    name: hass_version_latest_beta
    beta: true
    source: docker

  - platform: filesize
    file_paths:
      - /config/home-assistant_v2.db
      - /config/home-assistant.log

  - platform: file
    name: oresundskraft
    file_path: /config/python/data.kwh

  - platform: systemmonitor
    resources:
      - type: disk_use_percent
        arg: /
      - type: memory_use_percent
      - type: processor_use
      - type: last_boot

  - platform: uptime
    unit_of_measurement: minutes

  - platform: time_date
    display_options:
      ['time', 'date']

  - platform: scrape
    resource: https://elen.nu/timpriser-pa-el-for-elomrade-se4-malmo
    name: Aktuellt spotpris
    select: .elspot-area-price
    value_template: "{{ ((value.split(' ')[0]) | replace (',', '.'))}}"
    unit_of_measurement: öre/kWh
    scan_interval: 1800

  - platform: rest
    name: covid_19_folkhalsomyndigheten
    resource: https://www.arcgis.com/sharing/rest/content/items/2dc63e26f509468f896ec69476b0dab3/data
    value_template: "{% if value_json.embedCode == '' %} Otillgänglig {% else %} Tillgänglig {% endif %}"
    json_attributes_path: $.widgets.widget_1.config
    json_attributes: [embedCode]
    scan_interval: 21600

  - platform: rest
    name: hass_release_notes
    resource: https://api.github.com/repos/home-assistant/core/releases/latest
    value_template: "{{ value_json.name }}"
    json_attributes: [body]
    scan_interval: 21600

  - platform: dnsip

  - platform: darksky
    api_key: !secret darksky_api_key
    language: sv
    monitored_conditions:
      ['precip_probability', 'temperature', 'apparent_temperature']

  - platform: rest
    name: fullykiosk
    json_attributes:
      ['batteryLevel', 'screenBrightness', 'plugged', 'motionDetectorState', 
      'lastAppStart', 'internalStorageFreeSpace', 'internalStorageTotalSpace', 
      'ramFreeMemory', 'ramTotalMemory', 'currentFragment']
    resource: !secret fullykiosk_rest_resource
    value_template: '{{ value_json.isScreenOn }}'
    scan_interval: 10

  - platform: rest
    name: docker_cpu
    resource: !secret ha_dockermon_cpu
    value_template: >
      {% set cpuDelta = value_json.cpu_stats.cpu_usage.total_usage - value_json.precpu_stats.cpu_usage.total_usage %}
      {% set systemDelta = value_json.cpu_stats.system_cpu_usage - value_json.precpu_stats.system_cpu_usage %}
      {{ (cpuDelta / systemDelta * value_json.cpu_stats.cpu_usage.percpu_usage | length * 100) | round(1) }}
    json_attributes:
      ['cpu_stats', 'precpu_stats', 'memory_stats']

  - platform: rest
    name: docker_uptime
    resource: !secret ha_dockermon_uptime
    value_template: >
      {{ value_json.status.split(' ')[1:] | join(' ') | replace ('About a minute', '1 minut') 
      | replace ('About an hour', '1 timme')  | replace ('seconds', 'sekunder') | replace ('minutes', 'minuter') 
      | replace ('hours', 'timmar') | replace ('days', 'dagar') + ' sedan' }}

  - platform: snmp
    host: !secret synologydsm_host
    community: public
    name: Drifttid
    baseoid: !secret synologydsm_baseoid
    value_template: >
      {% set uptime = value %}
      {% set days = ((uptime | int) / 8640000) | int %}
      {% set hours = ((uptime | int) / 360000) | int %}
      {% set minutes = ((uptime | int) / 6000) | int %}
      {% if days >= 2 %} {{ days }} dagar
      {% elif days >= 1 %} {{ days }} dag
      {% elif minutes < 1 %} Mindre än 1 minut
      {% elif minutes <= 1 %} {{ minutes }} minut
      {% elif minutes < 60 %} {{ minutes }} minuter
      {% elif hours <= 1 %} {{ hours }} timme
      {% elif hours < 24 %} {{ hours }} timmar
      {% endif %}

  - platform: plex_recently_added
    token: !secret plex_token
    host: !secret plex_host
    port: !secret plex_port
    max: 1
    img_dir: '/'
    image_resolution: 500

  - platform: mqtt
    state_topic: valetudo/rockrobo/state
    json_attributes_topic: valetudo/rockrobo/map_data
    name: xiaomi_map
    value_template: OK
    scan_interval: 5

  - platform: mqtt
    state_topic: stat/gosund1/STATUS10
    name: gosund_fan
    force_update: true
    value_template: >
      {% if value_json.StatusSNS.ENERGY.Power | int > 10 %}
      on {% else %} off {% endif %}

  - platform: mqtt
    state_topic: stat/gosund2/STATUS10
    name: gosund_air_purifier
    force_update: true
    value_template: >
      {% if value_json.StatusSNS.ENERGY.Power | int > 0 %}
      on {% else %} off {% endif %}

  - platform: krisinformation
    country: Sverige

    ####################################################
    #                                                  #
    #                   COMMAND LINE                   #
    #                                                  #
    ####################################################

  - platform: command_line
    name: imac_ip
    scan_interval: 86400
    command: !secret imac_ip

  - platform: command_line
    name: imac_system_ssd
    scan_interval: 86400
    unit_of_measurement: '%'
    command: !secret imac_system_ssd

  - platform: command_line
    name: imac_macintosh_hd
    scan_interval: 86400
    unit_of_measurement: '%'
    command: !secret imac_macintosh_hd

  - platform: command_line
    name: imac_time_machine
    scan_interval: 86400
    unit_of_measurement: '%'
    command: !secret imac_time_machine

  - platform: command_line
    name: imac_cpu
    scan_interval: 86400
    unit_of_measurement: '%'
    command: !secret imac_cpu

  - platform: command_line
    name: imac_mem
    scan_interval: 86400
    unit_of_measurement: '%'
    command: !secret imac_mem

  - platform: command_line
    name: monitors_volume
    scan_interval: 86400
    command: !secret monitors_update_volume

  - platform: command_line
    name: monitors_mute_check
    scan_interval: 86400
    command: !secret monitors_mute_check

  - platform: command_line
    name: imac_uptime
    scan_interval: 86400
    command: !secret imac_uptime

  - platform: command_line
    name: skanetrafiken
    scan_interval: 120
    command: !secret skanetrafiken

    ####################################################
    #                                                  #
    #                     TEMPLATE                     #
    #                                                  #
    ####################################################

  - platform: template
    sensors:
      sidebar_greeting:
        entity_id: sensor.time
        value_template: >-
          {% set t = now().hour %}
          {% if t <= 1 %} God natt {{'\U0001F611'}}
          {% elif t <= 3 %} God natt {{'\U0001F62A'}}
          {% elif t <= 5 %} God natt {{'\U0001F634'}}
          {% elif t <= 7 %} God morgon {{'\U0001F4A9'}}
          {% elif t <= 9 %} God morgon {{'\u2615\uFE0F'}}
          {% elif t <= 10.5 %} God morgon {{'\U0001F642'}}
          {% elif t <= 13 %} God dag {{'\U0001F60A'}}
          {% elif t <= 15 %} God dag {{'\U0001F60E'}}
          {% elif t <= 17 %} God dag {{'\U0001F44B\U0001F3FB'}}
          {% elif t <= 19 %} God kväll {{'\U0001F44B\U0001F3FB'}}
          {% elif t <= 22 %} God kväll {{'\U0001F60C'}}
          {% elif t <= 23 %} God kväll {{'\U0001F974'}}
          {% else %} God kväll {{'\U0001F974'}}
          {% endif %}

      sidebar_active:
        value_template: >-
          {% set lights = [states.light.tvlampa, states.light.golvlampa, states.light.fonsterlampa, states.light.datorlampa, 
          states.light.vask_hoger, states.light.vask_vanster, states.light.taklampa, states.light.kladkammare_2, 
          states.light.hallampa_1, states.light.hallampa_2, states.light.hallampa_3, states.light.mattias, states.light.sanja, 
          states.light.spot_1, states.light.spot_2] %}
          {% set lights_on = lights | selectattr('state','eq','on') | list %}
          {% set lights_name = lights | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

          {% set switches = [states.switch.computer_imac, states.switch.tv_sony, states.switch.tv_samsung, 
          states.switch.playstation_4, states.switch.wemo_monitors, states.switch.wemo_fan, 
          states.switch.fan_anslut, states.switch.air_purifier] %}
          {% set switches_on = switches | selectattr('state','eq','on') | list %} 
          {% set switches_name = switches | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

          {% if (lights_on | length ==0 ) and (switches_on | length > 0) %} 
          {{ switches_name | regex_replace(',([^,]*)$',' och\\1') }} är på

          {% elif (lights_on | length ==1) and (switches_on | length == 1) %}
          {{ lights_name }} och {{switches_name }} är på

          {% elif (lights_on | length ==1) and (switches_on | length > 1) %}
          {{ lights_name }}, {{ switches_name | regex_replace(',([^,]*)$',' och\\1') }} är på

          {% elif (lights_on | length > 1) and (switches_on | length == 1) %}
          {{ lights_on | length }} lampor och {{ switches_name }} är på

          {% elif (lights_on | length > 1 ) and (switches_on | length > 1) %}
          {{ lights_on | length }} lampor, {{ switches_name | regex_replace(',([^,]*)$',' och\\1') }} är på

          {% elif (lights_on | length ==1) and (switches_on | length ==0) %}
          {{ lights_name }} är på

          {% elif (lights_on | length >1 ) and (switches_on | length ==0) %}
          {{ lights_on | length}} lampor är på

          {% else %} 
          <font color='#6a7377'>Allt är avstängt</font> 
          {% endif %}

      sidebar_vacuum:
        value_template: >-
          {% if is_state('vacuum.xiaomi_vacuum_cleaner', 'cleaning') %}
            Morty dammsuger
          {% elif is_state('vacuum.xiaomi_vacuum_cleaner', 'returning') %}
            Morty är färdig
          {% endif %}

      sidebar_weather:
        value_template: >-
          {% if states('sensor.dark_sky_temperature') == 'unknown' %}
          Kan inte läsa in väderinformation...
          {% else %}
            {% if states('sensor.dark_sky_temperature') | float <= 0.0 %}
            Känns som {{ states('sensor.dark_sky_apparent_temperature') | round }}° med 
            {{ states('sensor.dark_sky_precip_probability') | round }}% risk för snö {{'\u2744\uFE0F'}}

            {% elif states('sensor.dark_sky_temperature') | float > 0.0 %} 
            Känns som {{ states('sensor.dark_sky_apparent_temperature') | round }}° med 
            {{ states('sensor.dark_sky_precip_probability') | round }}% risk för regn 
            {%- if states('sensor.dark_sky_precip_probability') | float > 30.0 %} {{'\u2614\uFE0F' }}
            {% endif %}

            {% elif states('sensor.dark_sky_temperature') | float > 19.0 and 
            states('sensor.dark_sky_precip_probability') | float < 5.0 %}
            Känns som {{ states('sensor.dark_sky_apparent_temperature') | round }}° {{'\U0001F60E' }} med 
            {{ states('sensor.dark_sky_precip_probability') | round }}% risk för regn
            {% endif %}
          {% endif %}

      sidebar_skanetrafiken:
        value_template: >-
          {% if states('sensor.skanetrafiken') != 'från' %}
            Nästa buss går {{ states('sensor.skanetrafiken') }}
          {% endif %}

      public_ip:
        value_template: !secret public_ip

      placeholder:
        value_template: ' '

      dockermon_mem:
        friendly_name: Minne
        icon_template: mdi:memory
        value_template: >-
          {{ (state_attr('sensor.docker_cpu', 'memory_stats')['usage'] / 
          state_attr('sensor.docker_cpu', 'memory_stats')['limit'] * 100) | round(1) }}

      imac_vpn:
        friendly_name: VPN
        value_template: >-
          {% if states('sensor.imac_ip') == states('sensor.public_ip') %}
            Ej Ansluten
          {% else %}
            Ansluten
          {% endif %}
        icon_template: >-
          {% if states('sensor.imac_ip') == states('sensor.public_ip') %}
            mdi:shield-alert
          {% else %}
            mdi:shield-check
          {% endif %}

      computer_imac_uptime:
        entity_id: sensor.time
        friendly_name: Drifttid
        icon_template: mdi:calendar-clock
        value_template: >
          {% set uptime = (as_timestamp(now()) - as_timestamp(states('sensor.imac_uptime') | int | timestamp_local | default(0))) %}
          {% if uptime | timestamp_custom('%d') | int-1 == 1 %} {{ uptime | timestamp_custom('%d') | int-1}} dag
          {% elif uptime | timestamp_custom('%d') | int-1 >= 2 %} {{ uptime | timestamp_custom('%d') | int-1}} dagar
          {% elif uptime | timestamp_custom('%H') | int-1 == 1 %} {{ uptime | timestamp_custom('%H') | int-1}} timme
          {% elif uptime | timestamp_custom('%H') | int-1 >= 2 %} {{ uptime | timestamp_custom('%H') | int-1}} timmar
          {% elif uptime | timestamp_custom('%M') | int == 1 %} {{ uptime | timestamp_custom('%M') | int}} minut
          {% elif uptime | timestamp_custom('%M') | int >= 2 %} {{ uptime | timestamp_custom('%M') | int}} minuter
          {% else %} Minde än 1 minut
          {% endif %}

      hass_version:
        icon_template: mdi:home-assistant
        friendly_name_template: >-
          Installerad {{ states('sensor.hass_version_installed') }}
        value_template: >-
          {% if states('sensor.hass_version_installed') == states('sensor.hass_version_latest') %}
            Senaste
          {% else %}
            {{ states('sensor.hass_version_latest') }}
          {% endif %}

      hass_dev_release:
        entity_id: sensor.time
        icon_template: mdi:dev-to
        friendly_name_template: >-
          {% if ((as_timestamp(state_attr('calendar.home_assistant_devs', 
          'start_time')) - as_timestamp(now())) / 86400) > 20 %}
            Planerad beta
          {% else %}
            {{ state_attr('calendar.home_assistant_devs','message') }}
          {% endif %}
        value_template: >-
          {% set dev = ((as_timestamp(state_attr('calendar.home_assistant_devs', 
          'start_time')) - as_timestamp(now())) / 86400) %}
          {% if dev < -1 %} Släppt
          {% elif dev < 0 %} Idag
          {% elif dev < 1 %} Imorgon
          {% elif dev > 20 %} Ingen
          {% else %} {{ dev | int + 1 }} dagar
          {% endif %}

      printer_status:
        friendly_name: Skrivare
        icon_template: mdi:printer-wireless
        value_template: >-
          {% if is_state('sensor.hp_printer_status', 'On') %}
            På
          {% elif is_state('sensor.hp_printer_status', 'Scanning') %}
            Skannar
          {% elif is_state('sensor.hp_printer_status', 'Copying') %}
            Kopierar
          {% elif is_state('sensor.hp_printer_status', 'Printing') %}
            Skriver ut
          {% elif is_state('sensor.hp_printer_status', 'Cancelling Job') %}
            Avbryter
          {% elif is_state('sensor.hp_printer_status', 'Idle') %}
            Viloläge
          {% elif is_state('sensor.hp_printer_status', 'trayEmptyOrOpen') %}
            Inga papper
          {% elif is_state('sensor.hp_printer_status', 'Off') %}
            Av
          {% else %}
            {{ states('sensor.hp_printer_status') }}
          {% endif %}

      playstation_4:
        icon_template: mdi:sony-playstation
        value_template: >-
          {% if is_state('media_player.playstation_4', 'off') or 
          is_state('media_player.playstation_4', 'standby') or 
          is_state('media_player.playstation_4', 'unknown') %}
            off
          {% else %}
            on
          {% endif %}

    ####################################################
    #                                                  #
    #                      VACUUM                      #
    #                                                  #
    ####################################################

      roborock_battery:
        friendly_name: Batteri
        unit_of_measurement: '%'
        value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'battery_level') }}"
        icon_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'battery_icon') }}"

      roborock_state:
        friendly_name: Roborock S5
        icon_template: custom:roborock-vacuum
        value_template: >-
          {% if is_state('vacuum.xiaomi_vacuum_cleaner', 'docked') %}
          Dockad
          {% elif is_state('vacuum.xiaomi_vacuum_cleaner', 'paused') %}
          Pausad
          {% elif is_state('vacuum.xiaomi_vacuum_cleaner', 'cleaning') %}
          Städar
          {% elif is_state('vacuum.xiaomi_vacuum_cleaner', 'returning') %}
          Återvänder
          {% else %}
          {{ states('vacuum.xiaomi_vacuum_cleaner') }}
          {% endif %}

      roborock_speed:
        value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'fan_speed') }}"

      roborock_filter:
        friendly_name: Filter
        icon_template: custom:roborock-filter
        unit_of_measurement: '%'
        value_template: >
          {% if states('vacuum.xiaomi_vacuum_cleaner') == 'unknown' %}
          {{ states('vacuum.xiaomi_vacuum_cleaner') }}
          {% else %}
          {{ (state_attr('vacuum.xiaomi_vacuum_cleaner', 'filter_left') / 1.5) | round }}
          {% endif %}

      roborock_mainbrush:
        friendly_name: Huvudborste
        icon_template: custom:roborock-mainbrush
        unit_of_measurement: '%'
        value_template: >
          {% if states('vacuum.xiaomi_vacuum_cleaner') == 'unknown' %}
          {{ states('vacuum.xiaomi_vacuum_cleaner') }}
          {% else %}
          {{ (state_attr('vacuum.xiaomi_vacuum_cleaner', 'main_brush_left') / 3) | round }}
          {% endif %}

      roborock_sensors:
        friendly_name: Sensorer
        icon_template: custom:roborock-sensor
        unit_of_measurement: '%'
        value_template: >
          {% if states('vacuum.xiaomi_vacuum_cleaner') == 'unknown' %}
          {{ states('vacuum.xiaomi_vacuum_cleaner') }}
          {% else %}
          {{ (state_attr('vacuum.xiaomi_vacuum_cleaner', 'sensor_dirty_left') / 0.3) | round }}
          {% endif %}

      roborock_sidebrush:
        friendly_name: Sidoborste
        icon_template: custom:roborock-sidebrush
        unit_of_measurement: '%'
        value_template: >
          {% if states('vacuum.xiaomi_vacuum_cleaner') == 'unknown' %}
          {{ states('vacuum.xiaomi_vacuum_cleaner') }}
          {% else %}
          {{ (state_attr('vacuum.xiaomi_vacuum_cleaner', 'side_brush_left') / 2) | round }}
          {% endif %}

      roborock_last_clean:
        entity_id: sensor.time
        friendly_name: Senast städat
        icon_template: mdi:calendar-clock
        value_template: >
          {% if states('vacuum.xiaomi_vacuum_cleaner') == 'unknown' %}
          {{ states('vacuum.xiaomi_vacuum_cleaner') }}
          {% else %}
            {% set clean_stop = 
            (as_timestamp(now()) - as_timestamp(state_attr('vacuum.xiaomi_vacuum_cleaner', 'clean_stop') | default(0))) %}
            {% if clean_stop | timestamp_custom('%d') | int-1 == 1 %} {{ clean_stop | timestamp_custom('%d') | int-1}} dag sedan
            {% elif clean_stop | timestamp_custom('%d') | int-1 >= 2 %} {{ clean_stop | timestamp_custom('%d') | int-1}} dagar sedan
            {% elif clean_stop | timestamp_custom('%H') | int-1 == 1 %} {{ clean_stop | timestamp_custom('%H') | int-1}} timme sedan
            {% elif clean_stop | timestamp_custom('%H') | int-1 >= 2 %} {{ clean_stop | timestamp_custom('%H') | int-1}} timmar sedan
            {% elif clean_stop | timestamp_custom('%M')|int == 1 %} {{ clean_stop | timestamp_custom('%M') | int}} minut sedan
            {% elif clean_stop | timestamp_custom('%M')|int >= 2 %} {{ clean_stop | timestamp_custom('%M') | int}} minuter sedan
            {% else %} Minde än 1 minut sedan
            {% endif %}
          {% endif %}

    ####################################################
    #                                                  #
    #                      TABLET                      #
    #                                                  #
    ####################################################

      fullykiosk_plugged:
        friendly_name: Strömsladd ansluten
        value_template: >-
          {% if is_state_attr('sensor.fullykiosk', 'plugged', true) %} Ja {% else %} Nej {% endif %}
        icon_template: >-
          {% if is_state_attr('sensor.fullykiosk', 'plugged', true) %} mdi:power-plug {% else %} mdi:power-plug-off {% endif %}

      fullykiosk_storage:
        friendly_name: Lagring
        icon_template: mdi:sd
        unit_of_measurement: '%'
        value_template: >
          {% if is_state('sensor.fullykiosk', 'unavailable') %}
          {% else %}
          {{ 100 - ( state_attr('sensor.fullykiosk', 'internalStorageFreeSpace') / 
          state_attr('sensor.fullykiosk', 'internalStorageTotalSpace') * 100 ) | int }}
          {% endif %}

      fullykiosk_memory:
        friendly_name: Minne
        icon_template: mdi:memory
        unit_of_measurement: '%'
        value_template: >
          {% if is_state('sensor.fullykiosk', 'unavailable') %}
          {% else %}
          {{ 100 - ( state_attr('sensor.fullykiosk', 'ramFreeMemory') / 
          state_attr('sensor.fullykiosk', 'ramTotalMemory') * 100 ) | int }}
          {% endif %}

      fullykiosk_motion:
        friendly_name: Kamera
        icon_template: mdi:camera
        value_template: >-
          {% if is_state_attr('sensor.fullykiosk', 'motionDetectorState', 0) %}
          Av
          {% else %}
          På
          {% endif %}

      fullykiosk_battery:
        friendly_name: Batteri
        unit_of_measurement: '%'
        value_template: "{{ state_attr('sensor.fullykiosk', 'batteryLevel') }}"
        icon_template: >-
          {% set battery_level = state_attr('sensor.fullykiosk', 'batteryLevel') | int ('unknown') %}
          {% set battery_round = (battery_level | int / 10) | int * 10 %}
          {% if battery_level == 'unknown' %}
            mdi:battery-unknown
          {% else %}
            {% if battery_round >= 100 %}
              mdi:battery
            {% elif battery_round > 0 %}
              mdi:battery-{{ battery_round }}
            {% else %}
              mdi:battery-alert
            {% endif %}
          {% endif %}

    ####################################################
    #                                                  #
    #                      DATE                        #
    #                                                  #
    ####################################################

      sidebar_day:
        entity_id: sensor.date
        icon_template: mdi:calendar
        value_template: >
          {% set days = ['Måndag', 'Tisdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lördag', 'Söndag'] %}
          {{ days[now().weekday()] }}

      sidebar_date:
        icon_template: mdi:calendar
        value_template: >
          {% set months = ['Januari', 'Februari', 'Mars', 'April', 'Maj', 'Juni', 
          'Juli', 'Augusti', 'September', 'Oktober', 'November', 'December'] %}
          {{ strptime(states('sensor.date'), '%Y-%m-%d').day }}
          {{ months[now().month-1] }}

      mathem_countdown:
        entity_id: sensor.time
        friendly_name: Mathem
        icon_template: mdi:calendar
        value_template: >-
          {% if state_attr('calendar.mathem', 'start_time') ==  null or 
          state_attr('calendar.mathem', 'start_time') == None %}
          {% else %} 
            {% set mathem = state_attr('calendar.mathem', 'start_time') %}
            {% set nu_tid = now() %}

            {% set dag = strptime(mathem, '%Y-%m-%d %H:%M:%S').strftime('%A') 
            | replace('Monday', 'Måndag') | replace('Tuesday', 'Tisdag') 
            | replace('Wednesday', 'Onsdag') | replace('Thursday', 'Torsdag') 
            | replace('Friday', 'Fredag') | replace('Saturday', 'Lördag') | replace('Sunday', 'Söndag') %}
            {% set tid = as_timestamp(mathem) | timestamp_custom('%H:%M') %}
            {% set tid_end = as_timestamp(state_attr('calendar.mathem', 'end_time')) | timestamp_custom('%H:%M') %}

            {% set sub_timmar = as_timestamp(mathem) | timestamp_custom('%H') | int / 24 %}
            {% set count = (as_timestamp(mathem) - as_timestamp(nu_tid)) / 86400 - sub_timmar %}

            {% if count <= 0.0 %}
              {{'\U0001F6D2'}} Mathem idag mellan {{ tid }}-{{ tid_end }}
            {% elif count <= 1.0 %}
              Mathem imorgon mellan {{ tid }}-{{ tid_end }}
            {% elif count <= 2.0 %}
              Mathem i övermorgon mellan {{ tid }}-{{ tid_end }}
            {% else %}
              Mathem om {{ (count + sub_timmar) | round }} dagar på {{ dag }} mellan {{ tid }}-{{ tid_end }}
            {% endif %}
          {% endif %}

      tvatta_countdown:
        entity_id: sensor.time
        friendly_name: Tvätta
        icon_template: mdi:calendar
        value_template: >-
          {% if state_attr('calendar.tvatta', 'start_time') ==  null or 
          state_attr('calendar.tvatta', 'start_time') == None %}
          {% else %} 
            {% set calendar_tvattid = state_attr('calendar.tvatta', 'start_time') %}
            {% set nu_tid = now() %}

            {% set dag = strptime(calendar_tvattid, '%Y-%m-%d %H:%M:%S').strftime('%A') 
            | replace('Monday', 'Måndag') | replace('Tuesday', 'Tisdag') 
            | replace('Wednesday', 'Onsdag') | replace('Thursday', 'Torsdag') 
            | replace('Friday', 'Fredag') | replace('Saturday', 'Lördag') | replace('Sunday', 'Söndag') %}
            {% set tid = as_timestamp(calendar_tvattid) | timestamp_custom('%H:%M') %}

            {% set sub_timmar = as_timestamp(calendar_tvattid) | timestamp_custom('%H') | int / 24 %}
            {% set count = (as_timestamp(calendar_tvattid) - as_timestamp(nu_tid)) / 86400 - sub_timmar %}

            {% if count <= 0.0 %}
              {{'\U0001F4A6'}} Tvätt idag {{ tid }}
            {% elif count <= 1.0 %}
              Tvätt imorgon klockan {{ tid }}
            {% elif count <= 2.0 %}
              Tvätt i övermorgon klockan {{ tid }}
            {% else %}
              Tvätt om {{ (count + sub_timmar) | round }} dagar på {{ dag }} kl {{ tid }}
            {% endif %}
          {% endif %}

      tvatta_countdown_timer_trigger:
        entity_id: sensor.time
        icon_template: mdi:alert
        value_template: >-
          {% if state_attr('calendar.tvatta', 'start_time') ==  null or 
          state_attr('calendar.tvatta', 'start_time') == None %}
            false
          {% else %} 
            {% set calendar_tvattid = state_attr('calendar.tvatta', 'start_time') %}
            {% if ((as_timestamp(calendar_tvattid) - as_timestamp(now())) / 86400) <= 0.004 %}
            true {% else %} false {% endif %}
          {% endif %}

      krisinformation_time_trigger:
        entity_id: sensor.time
        icon_template: mdi:alert
        value_template: >-
          {% if is_state_attr('sensor.krisinformation_sverige', 'messages', []) %}
          {% else %}
            {% set date = state_attr('sensor.krisinformation_sverige', 'messages')[0]['Published'] %}
            {% if ((as_timestamp(date) - as_timestamp(now())) / 86400) <= -0.5 %}
            false {% else %} true
            {% endif %}
          {% endif %}

      mattias_last_changed:
        entity_id: sensor.time
        value_template: >-
          {%- set time = (as_timestamp(now()) - 
          as_timestamp(states.person.mattias.last_changed)) | int %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set days = (time // 86400) %}
          {% if time <= 60 %} 0m
          {% elif time <= 3600 %} {{ minutes }}m
          {% elif time <= 86400 %} {{ hours }}h
          {% elif time > 86400 %} {{ days }}d 
          {% endif %}

      sanja_last_changed:
        entity_id: sensor.time
        value_template: >-
          {%- set time = (as_timestamp(now()) - 
          as_timestamp(states.person.sanja.last_changed)) | int %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set days = (time // 86400) %}
          {% if time <= 60 %} 0m
          {% elif time <= 3600 %} {{ minutes }}m
          {% elif time <= 86400 %} {{ hours }}h
          {% elif time > 86400 %} {{ days }}d 
          {% endif %}

      hass_uptime:
        entity_id: sensor.time
        friendly_name: Senast omstart
        icon_template: mdi:update
        value_template: >-
          {% set uptime = states('sensor.uptime') | float %}
          {% if uptime < 1 %}
          {{ (uptime * 60) | int }} sekunder sedan
          {% elif uptime | int == 1 %}
          1 minut sedan
          {% elif uptime | int > 1 %}
            {% if uptime | int < 60 %}
            {{ uptime | int }} minuter sedan
            {% elif uptime | int / 60 == 24 %}
            {{ (uptime | int / 60 / 24) | int }} dag sedan
            {% elif uptime | int / 60 >= 24 %}
            {{ (uptime | int / 60 / 24) | int }} dagar sedan
            {% elif uptime | int >= 60 and uptime | int < 120 %}
            {{ (uptime | int / 60) | int }} timme sedan
            {% elif uptime | int >= 120 %}
            {{ (uptime | int / 60) | int }} timmar sedan
            {% endif %}
          {% endif %}

    ####################################################
    #                                                  #
    #                       NAS                        #
    #                                                  #
    ####################################################

      nas_disk_temp:
        friendly_name: Disktemperatur
        unit_of_measurement: '°C'
        icon_template: mdi:thermometer
        value_template: >
          {{ states('sensor.synology_average_disk_temp_volume_1') | round }}

      nas_net_down:
        value_template: ' '
        icon_template: mdi:arrow-down-bold
        friendly_name_template: >
          {% set down = states('sensor.synology_network_down') | float %}
          {% if down < 1000 %}
          {{ down | round(0) }} kb/s
          {% elif down >= 1000 %}
          {{ ((down / 1000) | round(2) | string).rstrip('.0') }} Mb/s
          {% endif %}

      nas_net_up:
        value_template: ' '
        icon_template: mdi:arrow-up-bold
        friendly_name_template: >
          {% set up = states('sensor.synology_network_up') | float %}
          {% if up < 1000 %}
          {{ up | round(0) }} kb/s
          {% elif up >= 1000 %}
          {{ ((up / 1000) | round(2) | string).rstrip('.0') }} Mb/s
          {% endif %}

      nas_status:
        friendly_name: Systemhälsa
        icon_template: custom:synology-nas
        value_template: >-
          {% if is_state('sensor.synology_status_volume_1', 'normal') %}
            Bra
          {% else %}
            {{ states('sensor.synology_status_volume_1') }}
          {% endif %}

      nas_vpn:
        friendly_name: VPN
        value_template: >-
          {% if states('sensor.myip') == states('sensor.public_ip') %}
            Ej Ansluten
          {% else %}
            Ansluten
          {% endif %}
        icon_template: >-
          {% if states('sensor.myip') == states('sensor.public_ip') %}
            mdi:shield-alert
          {% else %}
            mdi:shield-check
          {% endif %}

    ####################################################
    #                                                  #
    #                      MEDIA                       #
    #                                                  #
    ####################################################

      plex_title:
        icon_template: mdi:plex
        value_template: >
          {% set data = state_attr('sensor.plex_recently_added', 'data') %} 
          {{ data[1].title }}
          {% if data[1].number is none %} ({{ data[1].aired.split('-')[0] }})
          {% else %} {{ data[1].number }} {% endif %}

      plex_poster:
        icon_template: mdi:plex
        value_template: >
          {% set data = state_attr('sensor.plex_recently_added', 'data') %}
          {{ data[1].fanart }}

    ####################################################
    #                                                  #
    #                    Monthly kWh                   #
    #                                                  #
    ####################################################

      oresundskraft_1:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[0].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[0].split(' ')[2] | int }}"

      oresundskraft_2:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[1].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[1].split(' ')[2] | int }}"

      oresundskraft_3:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[2].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[2].split(' ')[2] | int }}"

      oresundskraft_4:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[3].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[3].split(' ')[2] | int }}"

      oresundskraft_5:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[4].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') | replace('y','j') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[4].split(' ')[2] | int }}"

      oresundskraft_6:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[5].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[5].split(' ')[2] | int }}"

      oresundskraft_7:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[6].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[6].split(' ')[2] | int }}"

      oresundskraft_8:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[7].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[7].split(' ')[2] | int }}"

      oresundskraft_9:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[8].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[8].split(' ')[2] | int }}"

      oresundskraft_10:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[9].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') | replace('c','k') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[9].split(' ')[2] | int }}"

      oresundskraft_11:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[10].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[10].split(' ')[2] | int }}"

      oresundskraft_12:
        friendly_name_template: >
          {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[11].split(' ')[1], 
          '%Y-%m-%d')) | timestamp_custom('%b') }}
        value_template: "{{ states('sensor.oresundskraft').split(',')[11].split(' ')[2] | int }}"

      oresundskraft_last_month_kwh:
        unit_of_measurement: 'kWh'
        value_template: >
          {% for month in range(12) %}
            {% if now().month-1 == (states('sensor.oresundskraft').split(',')
            [month].split(' ')[0]|join|string).lstrip('0')|int %}
              {{ states('sensor.oresundskraft').split(',')[month].split(' ')[2] }}
            {% endif %}
          {% endfor %}

      oresundskraft_last_month_price:
        entity_id: sensor.oresundskraft
        icon_template: mdi:calculator
        friendly_name_template: >
          {% if now().month-1 == 0 %}
            Beräknad {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[11].split(' ')[1], '%Y-%m-%d')) | 
            timestamp_custom('%B') | replace('ay', 'aj') | replace('y', 'i') | replace('ch', 's') 
            | replace('ne', 'ni') | replace('ust', 'usti') | replace('ct', 'kt')  }}
          {% else %}
            {% for month in range(12) %}
              {% if now().month-1 == (states('sensor.oresundskraft').split(',')[month].split(' ')[0]|join|string).lstrip('0')|int %}
                Beräknad {{ as_timestamp(strptime(states('sensor.oresundskraft').split(',')[month].split(' ')[1], '%Y-%m-%d')) | 
                timestamp_custom('%B') | replace('ay', 'aj') | replace('y', 'i') | replace('ch', 's') 
                | replace('ne', 'ni') | replace('ust', 'usti') | replace('ct', 'kt')  }}
              {% endif %}
            {% endfor %}
          {% endif %}
        value_template: >
          {% set dagar %}
            {% if now().month-1 == 0 %}
              {{ states('sensor.oresundskraft').split(',')[11].split(' ')[1].split('-')[2] | int }}
            {% else %}
              {% for month in range(12) %}
                {% if now().month-1 == (states('sensor.oresundskraft').split(',')[month].split(' ')[0]|join|string).lstrip('0')|int %}
                  {{ states('sensor.oresundskraft').split(',')[month].split(' ')[1].split('-')[2] | int }}
                {% endif %}
              {% endfor %}
            {% endif %}
          {% endset %}
          {% set kwh = states('sensor.oresundskraft_last_month_kwh') | float %}
            {% set eon_solkraft = states('sensor.oresundskraft_last_month_kwh') | float * 0.05 %}
            {% set eon_arsavgift = 480 / 366 * dagar | float %}
              {% set spotpris = states('sensor.aktuellt_spotpris') | float / 100 %}
            {% set ore_abonnemang = 1020 / 366 * dagar | float %}
            {% set ore_elöverföring = kwh * 0.1400 %}
            {% set ore_energiskatt = kwh * 0.3530 %}
              {% set eon = (eon_solkraft + eon_arsavgift + (0.2373 * kwh * 1.25)) | round(2) %}
              {% set ore = ((ore_abonnemang + ore_elöverföring + ore_energiskatt) * 1.25) | round(2) %}
          {{ (eon + ore) | round }}
        unit_of_measurement: 'kr'

      oresundskraft_total_year_kwh:
        entity_id: sensor.oresundskraft
        icon_template: mdi:poll-box
        friendly_name_template: > 
          Totalt {{ now().year }}
        value_template: "{{ states('sensor.oresundskraft').split('total=')[1]}}"
        unit_of_measurement: 'kWh'

      oresundskraft_year:
        entity_id: sensor.time
        icon_template: mdi:checkbox-blank
        friendly_name_template: "{{ now().year }}"
        value_template: ' '

      oresundskraft_last_year:
        entity_id: sensor.time
        icon_template: mdi:checkbox-blank
        friendly_name_template: "{{ now().year-1 }}"
        value_template: ' '
